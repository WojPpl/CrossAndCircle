{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wojp/CrossAndCircle/src/packages/GameButton/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Styles from \"./styles\";\n\nconst GameButton = ({\n  buttonClick,\n  positionX,\n  positionY,\n  player,\n  moves\n}) => {\n  _s();\n\n  const [move, setMove] = useState(false);\n  const [buttonFrozen, setButtonFrozen] = useState();\n\n  const chooseBorderStyle = () => {\n    let style;\n\n    switch (positionX) {\n      case 0:\n        if (positionY === 1) {\n          style = Styles.sideBorder;\n        } else {\n          style = Styles.noBorder;\n        }\n\n        break;\n\n      case 1:\n        if (positionY === 1) {\n          style = Styles.fullBorder;\n        } else {\n          style = Styles.horizontalBorder;\n        }\n\n        break;\n\n      case 2:\n        if (positionY === 1) {\n          style = Styles.sideBorder;\n        } else {\n          style = Styles.noBorder;\n        }\n\n        break;\n\n      default:\n        style = Styles.noBorder;\n        break;\n    }\n\n    return style;\n  };\n\n  const handleOnClick = () => {\n    setMove(true);\n    setButtonFrozen(player ? \"0\" : \"x\");\n    buttonClick({\n      positionY: positionY,\n      positionX: positionX,\n      player: player ? \"0\" : \"x\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: chooseBorderStyle(),\n    onClick: !buttonFrozen ? () => {\n      handleOnClick();\n    } : console.log(),\n    children: move ? buttonFrozen ? buttonFrozen : player ? \"o\" : \"x\" : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GameButton, \"0WHmYR8Qun86fR4R31ScsO2ygv4=\");\n\n_c = GameButton;\nGameButton.propTypes = {\n  positionX: PropTypes.number\n};\nexport default GameButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameButton\");","map":{"version":3,"sources":["/home/wojp/CrossAndCircle/src/packages/GameButton/index.js"],"names":["React","useState","PropTypes","Styles","GameButton","buttonClick","positionX","positionY","player","moves","move","setMove","buttonFrozen","setButtonFrozen","chooseBorderStyle","style","sideBorder","noBorder","fullBorder","horizontalBorder","handleOnClick","console","log","propTypes","number"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,SAAf;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA,MAArC;AAA6CC,EAAAA;AAA7C,CAAD,KAA0D;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,EAAhD;;AACA,QAAMa,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,KAAJ;;AACA,YAAQT,SAAR;AACI,WAAK,CAAL;AACI,YAAGC,SAAS,KAAK,CAAjB,EAAqB;AACjBQ,UAAAA,KAAK,GAAGZ,MAAM,CAACa,UAAf;AACH,SAFD,MAGK;AACDD,UAAAA,KAAK,GAAGZ,MAAM,CAACc,QAAf;AACH;;AACD;;AACJ,WAAK,CAAL;AACI,YAAGV,SAAS,KAAK,CAAjB,EAAqB;AACjBQ,UAAAA,KAAK,GAAGZ,MAAM,CAACe,UAAf;AACH,SAFD,MAGK;AACDH,UAAAA,KAAK,GAAGZ,MAAM,CAACgB,gBAAf;AACH;;AACD;;AACJ,WAAK,CAAL;AACI,YAAGZ,SAAS,KAAK,CAAjB,EAAqB;AACjBQ,UAAAA,KAAK,GAAGZ,MAAM,CAACa,UAAf;AACH,SAFD,MAGK;AACDD,UAAAA,KAAK,GAAGZ,MAAM,CAACc,QAAf;AACH;;AACD;;AACJ;AACIF,QAAAA,KAAK,GAAGZ,MAAM,CAACc,QAAf;AACA;AA3BR;;AA6BA,WAAOF,KAAP;AACH,GAhCD;;AAkCA,QAAMK,aAAa,GAAG,MAAM;AACxBT,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,eAAe,CAACL,MAAM,GAAG,GAAH,GAAS,GAAhB,CAAf;AACAH,IAAAA,WAAW,CACP;AACIE,MAAAA,SAAS,EAAEA,SADf;AAEID,MAAAA,SAAS,EAAEA,SAFf;AAGIE,MAAAA,MAAM,EAAEA,MAAM,GAAG,GAAH,GAAS;AAH3B,KADO,CAAX;AAOH,GAVD;;AAYA,sBAAQ;AAAK,IAAA,KAAK,EAAEM,iBAAiB,EAA7B;AAAiC,IAAA,OAAO,EAAE,CAACF,YAAD,GAAgB,MAAM;AAACQ,MAAAA,aAAa;AAAG,KAAvC,GAA0CC,OAAO,CAACC,GAAR,EAApF;AAAA,cAAoGZ,IAAI,GAAGE,YAAY,GAAGA,YAAH,GAAkBJ,MAAM,GAAG,GAAH,GAAS,GAAhD,GAAsD;AAA9J;AAAA;AAAA;AAAA;AAAA,UAAR;AACH,CAlDD;;GAAMJ,U;;KAAAA,U;AAqDNA,UAAU,CAACmB,SAAX,GAAuB;AACnBjB,EAAAA,SAAS,EAAEJ,SAAS,CAACsB;AADF,CAAvB;AAIA,eAAepB,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Styles from \"./styles\";\n\nconst GameButton = ({ buttonClick, positionX, positionY, player, moves }) => {\n    const [move, setMove] = useState(false);\n    const [buttonFrozen, setButtonFrozen] = useState();\n    const chooseBorderStyle = () => {\n        let style;\n        switch (positionX) {\n            case 0:\n                if(positionY === 1 ) {\n                    style = Styles.sideBorder;\n                }\n                else {\n                    style = Styles.noBorder;\n                }\n                break;\n            case 1:\n                if(positionY === 1 ) {\n                    style = Styles.fullBorder;\n                }\n                else {\n                    style = Styles.horizontalBorder;\n                }\n                break;\n            case 2:\n                if(positionY === 1 ) {\n                    style = Styles.sideBorder;\n                }\n                else {\n                    style = Styles.noBorder;\n                }\n                break;\n            default:\n                style = Styles.noBorder;\n                break;\n        }\n        return style\n    }\n\n    const handleOnClick = () => {\n        setMove(true);\n        setButtonFrozen(player ? \"0\" : \"x\");\n        buttonClick(\n            {\n                positionY: positionY,\n                positionX: positionX,\n                player: player ? \"0\" : \"x\"\n            }\n        )\n    }\n\n    return (<div style={chooseBorderStyle()} onClick={!buttonFrozen ? () => {handleOnClick()} : console.log()}>{move ? buttonFrozen ? buttonFrozen : player ? \"o\" : \"x\" : \"\" }</div>)\n}\n\n\nGameButton.propTypes = {\n    positionX: PropTypes.number\n}\n\nexport default GameButton;\n\n"]},"metadata":{},"sourceType":"module"}