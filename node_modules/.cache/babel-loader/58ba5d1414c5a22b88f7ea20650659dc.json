{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wojp/CrossAndCircle/src/packages/GameButton/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Styles from \"./styles\";\n\nconst GameButton = ({\n  buttonClick,\n  positionX,\n  positionY,\n  player,\n  aiMove\n}) => {\n  _s();\n\n  const [move, setMove] = useState(false);\n  const [buttonFrozen, setButtonFrozen] = useState();\n  const ref = useRef(null);\n  useEffect(() => {\n    console.log(\"poszedł efekt\");\n    console.log(aiMove);\n  }, aiMove);\n\n  const chooseBorderStyle = () => {\n    let style;\n\n    switch (positionX) {\n      case 0:\n        if (positionY === 1) {\n          style = Styles.sideBorder;\n        } else {\n          style = Styles.noBorder;\n        }\n\n        break;\n\n      case 1:\n        if (positionY === 1) {\n          style = Styles.fullBorder;\n        } else {\n          style = Styles.horizontalBorder;\n        }\n\n        break;\n\n      case 2:\n        if (positionY === 1) {\n          style = Styles.sideBorder;\n        } else {\n          style = Styles.noBorder;\n        }\n\n        break;\n\n      default:\n        style = Styles.noBorder;\n        break;\n    }\n\n    return style;\n  };\n\n  const handleOnClick = () => {\n    setMove(true);\n    setButtonFrozen(player ? \"0\" : \"x\");\n    buttonClick({\n      positionY: positionY,\n      positionX: positionX,\n      player: player ? \"0\" : \"x\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: chooseBorderStyle(),\n    onClick: !buttonFrozen ? () => {\n      handleOnClick();\n    } : console.log(),\n    ref: ref,\n    children: move ? buttonFrozen ? buttonFrozen : player ? \"o\" : \"x\" : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 13\n  }, this);\n};\n\n_s(GameButton, \"l/ALAge9QSguk99PZehFmKiRFSs=\");\n\n_c = GameButton;\nGameButton.propTypes = {\n  positionX: PropTypes.number\n};\nexport default GameButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameButton\");","map":{"version":3,"sources":["/home/wojp/CrossAndCircle/src/packages/GameButton/index.js"],"names":["React","useState","useRef","useEffect","PropTypes","Styles","GameButton","buttonClick","positionX","positionY","player","aiMove","move","setMove","buttonFrozen","setButtonFrozen","ref","console","log","chooseBorderStyle","style","sideBorder","noBorder","fullBorder","horizontalBorder","handleOnClick","propTypes","number"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,SAAf;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA,MAArC;AAA6CC,EAAAA;AAA7C,CAAD,KAA2D;AAAA;;AAC1E,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,EAAhD;AACA,QAAMe,GAAG,GAAGd,MAAM,CAAC,IAAD,CAAlB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACH,GAHQ,EAGNA,MAHM,CAAT;;AAIA,QAAMQ,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,KAAJ;;AACA,YAAQZ,SAAR;AACI,WAAK,CAAL;AACI,YAAGC,SAAS,KAAK,CAAjB,EAAqB;AACjBW,UAAAA,KAAK,GAAGf,MAAM,CAACgB,UAAf;AACH,SAFD,MAGK;AACDD,UAAAA,KAAK,GAAGf,MAAM,CAACiB,QAAf;AACH;;AACD;;AACJ,WAAK,CAAL;AACI,YAAGb,SAAS,KAAK,CAAjB,EAAqB;AACjBW,UAAAA,KAAK,GAAGf,MAAM,CAACkB,UAAf;AACH,SAFD,MAGK;AACDH,UAAAA,KAAK,GAAGf,MAAM,CAACmB,gBAAf;AACH;;AACD;;AACJ,WAAK,CAAL;AACI,YAAGf,SAAS,KAAK,CAAjB,EAAqB;AACjBW,UAAAA,KAAK,GAAGf,MAAM,CAACgB,UAAf;AACH,SAFD,MAGK;AACDD,UAAAA,KAAK,GAAGf,MAAM,CAACiB,QAAf;AACH;;AACD;;AACJ;AACIF,QAAAA,KAAK,GAAGf,MAAM,CAACiB,QAAf;AACA;AA3BR;;AA6BA,WAAOF,KAAP;AACH,GAhCD;;AAkCA,QAAMK,aAAa,GAAG,MAAM;AACxBZ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,eAAe,CAACL,MAAM,GAAG,GAAH,GAAS,GAAhB,CAAf;AACAH,IAAAA,WAAW,CACP;AACIE,MAAAA,SAAS,EAAEA,SADf;AAEID,MAAAA,SAAS,EAAEA,SAFf;AAGIE,MAAAA,MAAM,EAAEA,MAAM,GAAG,GAAH,GAAS;AAH3B,KADO,CAAX;AAOH,GAVD;;AAYA,sBAAQ;AAAK,IAAA,KAAK,EAAES,iBAAiB,EAA7B;AAAiC,IAAA,OAAO,EAAE,CAACL,YAAD,GAAgB,MAAM;AAACW,MAAAA,aAAa;AAAG,KAAvC,GAA0CR,OAAO,CAACC,GAAR,EAApF;AAAmG,IAAA,GAAG,EAAEF,GAAxG;AAAA,cAA8GJ,IAAI,GAAGE,YAAY,GAAGA,YAAH,GAAkBJ,MAAM,GAAG,GAAH,GAAS,GAAhD,GAAsD;AAAxK;AAAA;AAAA;AAAA;AAAA,UAAR;AACH,CAvDD;;GAAMJ,U;;KAAAA,U;AA0DNA,UAAU,CAACoB,SAAX,GAAuB;AACnBlB,EAAAA,SAAS,EAAEJ,SAAS,CAACuB;AADF,CAAvB;AAIA,eAAerB,UAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Styles from \"./styles\";\n\nconst GameButton = ({ buttonClick, positionX, positionY, player, aiMove }) => {\n    const [move, setMove] = useState(false);\n    const [buttonFrozen, setButtonFrozen] = useState();\n    const ref = useRef(null);\n    useEffect(() => {\n        console.log(\"poszedł efekt\");\n        console.log(aiMove);\n    }, aiMove);\n    const chooseBorderStyle = () => {\n        let style;\n        switch (positionX) {\n            case 0:\n                if(positionY === 1 ) {\n                    style = Styles.sideBorder;\n                }\n                else {\n                    style = Styles.noBorder;\n                }\n                break;\n            case 1:\n                if(positionY === 1 ) {\n                    style = Styles.fullBorder;\n                }\n                else {\n                    style = Styles.horizontalBorder;\n                }\n                break;\n            case 2:\n                if(positionY === 1 ) {\n                    style = Styles.sideBorder;\n                }\n                else {\n                    style = Styles.noBorder;\n                }\n                break;\n            default:\n                style = Styles.noBorder;\n                break;\n        }\n        return style\n    }\n\n    const handleOnClick = () => {\n        setMove(true);\n        setButtonFrozen(player ? \"0\" : \"x\");\n        buttonClick(\n            {\n                positionY: positionY,\n                positionX: positionX,\n                player: player ? \"0\" : \"x\"\n            }\n        )\n    }\n\n    return (<div style={chooseBorderStyle()} onClick={!buttonFrozen ? () => {handleOnClick()} : console.log()} ref={ref}>{move ? buttonFrozen ? buttonFrozen : player ? \"o\" : \"x\" : \"\" }</div>)\n}\n\n\nGameButton.propTypes = {\n    positionX: PropTypes.number\n}\n\nexport default GameButton;\n\n"]},"metadata":{},"sourceType":"module"}